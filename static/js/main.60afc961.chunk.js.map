{"version":3,"sources":["ColorModeSwitcher.js","blockchain/web3.js","blockchain/interface/deployer.js","blockchain/functions.js","components/newTokenForm.js","components/tokenList.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","Web3","require","Provider","web3","DeployerInstance","eth","Contract","Deployer","abi","Moralis","initialize","serverURL","create","data","a","deployer","instance","name","symbol","maxSupply","decimals","isReiussable","tokenReceiver","isBurnable","methods","createToken","utils","toWei","send","from","result","window","alert","message","saveToken","Token","Object","extend","token","set","events","tokenDeploy","returnValues","newTokenAddress","save","then","id","error","getTokens","query","Query","find","response","NewTokenForm","useState","tokenDetails","setTokenDetails","isLoading","setIsLoading","handleCreate","console","log","textAlign","value","onChange","e","target","placeholder","marginTop","TokenList","tokens","setTokens","getTokensInfo","map","push","attributes","useEffect","address","App","theme","justifyContent","justifySelf","minH","p","spacing","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"4VAIaA,EAAoB,SAAAC,GAC/B,IAAQC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACT,iCAAyBN,EAAzB,SACAO,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXC,QAASZ,EACTa,KAAM,cAACT,EAAD,KACFL,K,0BCnBJe,EAAOC,EAAQ,KACfC,EAAWD,EAAQ,KA4BVE,EAjBF,IAAIH,EAFA,IAAIE,EAJnB,mEAEA,6E,SCCaE,MAJf,WACE,OAAO,IAAID,EAAKE,IAAIC,SAASC,EAASC,IAHhB,+CCAlBC,EAAUR,EAAQ,MAExBQ,EAAQC,WAAW,4CAEnBD,EAAQE,UAAY,mDAEb,IAUMC,EAAM,uCAAG,WAAMC,GAAN,+BAAAC,EAAA,sEACCC,IADD,cAChBC,EADgB,OAGlBC,EAOEJ,EAPFI,KACAC,EAMEL,EANFK,OACAC,EAKEN,EALFM,UACAC,EAIEP,EAJFO,SACAC,EAGER,EAHFQ,aACAC,EAEET,EAFFS,cACAC,EACEV,EADFU,WATkB,kBAYCP,EAASQ,QACzBC,YACCR,EACAC,EACAf,EAAKuB,MAAMC,MAAMR,GACjBC,EACAC,EACAC,EACAC,GAEDK,KAAK,CAAEC,KFrCgB,+CEeR,cAYdC,EAZc,yBAuBXA,GAvBW,kCAyBlBC,OAAOC,MAAM,KAAMC,SAzBD,0DAAH,sDA6BNC,EAAS,uCAAG,WAAOrB,EAAMiB,GAAb,iBAAAhB,EAAA,sDACjBqB,EAAQ1B,EAAQ2B,OAAOC,OAAO,UAC9BC,EAAQ,IAAIH,GAEZI,IAAI,OAAQ1B,EAAKI,MACvBqB,EAAMC,IAAI,SAAU1B,EAAKK,QACzBoB,EAAMC,IAAI,YAAa1B,EAAKM,WAC5BmB,EAAMC,IAAI,WAAY1B,EAAKO,UAC3BkB,EAAMC,IAAI,eAAgB1B,EAAKQ,cAC/BiB,EAAMC,IAAI,UAAWT,EAAOU,OAAOC,YAAYC,aAAaC,iBAC5DL,EAAMC,IAAI,aAAc1B,EAAKU,YAE7Be,EAAMM,OAAOC,MACX,SAAAP,GAEEP,OAAOC,MAAM,qCAAuCM,EAAMQ,OAE5D,SAAAC,GAGEhB,OAAOC,MACL,iDAAmDe,EAAMd,YArBxC,4CAAH,wDA2BTe,EAAS,uCAAG,gCAAAlC,EAAA,6DACjBqB,EAAQ1B,EAAQ2B,OAAOC,OAAO,SAC9BY,EAAQ,IAAIxC,EAAQyC,MAAMf,GAFT,SAIAc,EAAME,OAJN,cAIjBC,EAJiB,yBAMhBA,GANgB,2CAAH,qD,uCC0DPC,MAzHf,WACE,MAAwCC,mBAAS,CAC/CrC,KAAM,GACNC,OAAQ,GACRC,UAAW,GACXC,SAAU,GACVC,aAAc,GACdC,cAAe,GACfC,WAAY,KAPd,mBAAOgC,EAAP,KAAqBC,EAArB,KASA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAY,uCAAG,8BAAA7C,EAAA,6DACnB4C,GAAa,GADM,SAEA9C,EAAO2C,GAFP,QAGnB,QADIzB,EAFe,cAGnB,IAAIA,GAAJ,UAAIA,EAAQU,cAAZ,aAAI,EAAgBC,YAAYC,aAAaC,mBAC3CZ,OAAOC,MAAP,2CACsCF,EAAOU,OAAOC,YAAYC,aAAaC,kBAE7ET,EAAUqB,EAAczB,IAE1B8B,QAAQC,IAAI/B,GACZ4B,GAAa,GAVM,2CAAH,qDAYlB,OACE,eAAC,IAAD,CAAKI,UAAU,OAAOpE,SAAS,KAA/B,UACE,cAAC,IAAD,CAAMA,SAAS,QAAf,yBACA,cAAC,IAAD,CACEqE,MAAOR,EAAatC,KACpB+C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BAAKD,GAAN,IAAoBtC,KAAMgD,EAAEC,OAAOH,UAEpDI,YAAY,eAEd,cAAC,IAAD,CAAMzE,SAAS,QAAf,2BACA,cAAC,IAAD,CACEqE,MAAOR,EAAarC,OACpB8C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BAAKD,GAAN,IAAoBrC,OAAQ+C,EAAEC,OAAOH,UAEtDI,YAAY,iBAEd,cAAC,IAAD,CAAMzE,SAAS,QAAf,gDACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEqE,MAAOR,EAAapC,UACpB6C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BACXD,GADU,IAEbpC,UAAW8C,EAAEC,OAAOH,UAGxBI,YAAY,iBAGhB,cAAC,IAAD,CAAMzE,SAAS,QAAf,uBACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEqE,MAAOR,EAAanC,SACpB4C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BACXD,GADU,IAEbnC,SAAU6C,EAAEC,OAAOH,UAGvBI,YAAY,eAGhB,cAAC,IAAD,CAAMzE,SAAS,QAAf,iFAGA,cAAC,IAAD,CACEqE,MAAOR,EAAalC,aACpB2C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BACXD,GADU,IAEblC,aAAc4C,EAAEC,OAAOH,UAG3BI,YAAY,eAEd,cAAC,IAAD,CAAMzE,SAAS,QAAf,8GAIA,cAAC,IAAD,CACEqE,MAAOR,EAAajC,cACpB0C,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BACXD,GADU,IAEbjC,cAAe2C,EAAEC,OAAOH,UAG5BI,YAAY,2BAEd,cAAC,IAAD,CAAMzE,SAAS,QAAf,gFAGA,cAAC,IAAD,CACEqE,MAAOR,EAAahC,WACpByC,SAAU,SAAAC,GAAC,OACTT,EAAgB,2BACXD,GADU,IAEbhC,WAAY0C,EAAEC,OAAOH,UAGzBI,YAAY,eAEbV,EACC,cAAC,IAAD,CAAQW,UAAU,IAAItE,QAAS6D,EAA/B,SACE,cAAC,IAAD,MAGF,cAAC,IAAD,CAAQS,UAAU,IAAItE,QAAS6D,EAA/B,wB,UChEOU,MAzDf,WACE,MAA4Bf,mBAAS,IAArC,mBAAOgB,EAAP,KAAeC,EAAf,KAEMC,EAAa,uCAAG,8BAAA1D,EAAA,sEACHkC,IADG,OAChBnC,EADgB,OAEhBiB,EAAS,GACbjB,EAAK4D,KAAI,SAAAnC,GACP,OAAOR,EAAO4C,KAAKpC,EAAMqC,eAE3BJ,EAAUzC,GANU,2CAAH,qDAanB,OAJA8C,qBAAU,WACRJ,MACC,IAGD,eAAC,IAAD,CAAO7E,QAAQ,SAAf,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,qBACA,cAAC,IAAD,yBACA,cAAC,IAAD,uBACA,cAAC,IAAD,yBACA,cAAC,IAAD,sBACA,cAAC,IAAD,4BAGJ,cAAC,IAAD,UACG2E,EAAOG,KAAI,SAAAnC,GACV,IACEuC,EAOEvC,EAPFuC,QACAzD,EAMEkB,EANFlB,SACAC,EAKEiB,EALFjB,aACAF,EAIEmB,EAJFnB,UACAF,EAGEqB,EAHFrB,KACAC,EAEEoB,EAFFpB,OACAK,EACEe,EADFf,WAEF,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WAAKN,EAAL,OACA,eAAC,IAAD,WAAKC,EAAL,OACA,eAAC,IAAD,WAAKC,EAAL,OACA,eAAC,IAAD,WAAKC,EAAL,OACA,eAAC,IAAD,WAAKC,EAAL,OACA,eAAC,IAAD,WAAKwD,EAAL,OACA,eAAC,IAAD,WAAKtD,EAAL,SAPOsD,YCYNC,MApCf,WACE,MAAwBxB,mBAAS,IAAjC,mBAEA,OAFA,UAGE,cAAC,IAAD,CAAgByB,MAAOA,QAAvB,SACE,eAAC,IAAD,CAAKjB,UAAU,SAASpE,SAAS,KAAjC,UACE,cAAC,IAAD,CAAQsF,eAAe,gBAAvB,SACE,cAAC,EAAD,CAAmBC,YAAY,eAGjC,cAAC,IAAD,CAAMC,KAAK,QAAQC,EAAG,EAAtB,SACE,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACE,cAAC,IAAD,wBAEA,eAAC,IAAD,CAAMC,MAAM,OAAZ,UACE,eAAC,IAAD,CAASL,eAAe,SAAxB,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,gCAGF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,uBClCHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCKMO,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACLa,QAAQb,MAAMA,EAAMd,YClH5BqD,K","file":"static/js/main.60afc961.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","const Web3 = require('web3');\r\nconst Provider = require('@truffle/hdwallet-provider');\r\n\r\n// testnet account - don't use and don't send funds on mainnet\r\nexport const accountAddress = '0x2cC9363C90FD1c1B940670830bfa3a86eA905973';\r\nlet privateKey =\r\n  '62c9d340b5a3a6c2b61759440cc70edf644b880e9c3211a8a05d40515cfe48cb';\r\nlet nodeTestnet =\r\n  'https://speedy-nodes-nyc.moralis.io/1d19a6082204e3ecd8dcf0b9/bsc/testnet';\r\n\r\nconst provider = new Provider(privateKey, nodeTestnet);\r\n\r\nconst web3 = new Web3(provider);\r\n\r\n// let web3;\r\n\r\n// if (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\r\n//   //we are in the browser and metamask is running\r\n//   web3 = new Web3(Web3.givenProvider);\r\n// } else {\r\n//   //we are on the server or the user don't have metamask\r\n\r\n//   window.alert('Please Connect Your Wallet');\r\n//   // const provider = new Web3.providers.HttpProvider(\r\n//   //     \"https://data-seed-prebsc-1-s1.binance.org:8545\"\r\n//   // );\r\n//   // web3 = new Web3(provider);\r\n// }\r\n\r\nexport default web3;\r\n","import web3 from '../web3';\r\nimport Deployer from '../abi/Deployer.json';\r\n\r\nconst deployerAddress = '0x4a4b32422d250182A46d847a79f06e272f30673A';\r\n\r\nfunction DeployerInstance() {\r\n  return new web3.eth.Contract(Deployer.abi, deployerAddress);\r\n}\r\n\r\nexport default DeployerInstance;\r\n","import deployer from './interface/deployer';\r\n// import erc20 from './interface/erc20';\r\nimport web3, { accountAddress } from './web3';\r\nconst Moralis = require('moralis');\r\n\r\nMoralis.initialize('91M5UMZcKjdRbjbS8FMlIAD3xk39cQq2K0C6adPa');\r\n\r\nMoralis.serverURL = 'https://x9otfdizv1zu.moralisweb3.com:2053/server';\r\n\r\nexport const login = async () => {\r\n  try {\r\n    let newUser = await Moralis.Web3.authenticate();\r\n\r\n    return newUser.get('ethAddress');\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nexport const create = async data => {\r\n  let instance = await deployer();\r\n  const {\r\n    name,\r\n    symbol,\r\n    maxSupply,\r\n    decimals,\r\n    isReiussable,\r\n    tokenReceiver,\r\n    isBurnable,\r\n  } = data;\r\n  try {\r\n    let result = await instance.methods\r\n      .createToken(\r\n        name,\r\n        symbol,\r\n        web3.utils.toWei(maxSupply),\r\n        decimals,\r\n        isReiussable,\r\n        tokenReceiver,\r\n        isBurnable\r\n      )\r\n      .send({ from: accountAddress });\r\n    return result;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const saveToken = async (data, result) => {\r\n  const Token = Moralis.Object.extend('Token');\r\n  const token = new Token();\r\n\r\n  token.set('name', data.name);\r\n  token.set('symbol', data.symbol);\r\n  token.set('maxSupply', data.maxSupply);\r\n  token.set('decimals', data.decimals);\r\n  token.set('isReiussable', data.isReiussable);\r\n  token.set('address', result.events.tokenDeploy.returnValues.newTokenAddress);\r\n  token.set('isBurnable', data.isBurnable);\r\n\r\n  token.save().then(\r\n    token => {\r\n      // Execute any logic that should take place after the object is saved.\r\n      window.alert('New object created with objectId: ' + token.id);\r\n    },\r\n    error => {\r\n      // Execute any logic that should take place if the save fails.\r\n      // error is a Moralis.Error with an error code and message.\r\n      window.alert(\r\n        'Failed to create new object, with error code: ' + error.message\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nexport const getTokens = async () => {\r\n  const Token = Moralis.Object.extend('Token');\r\n  const query = new Moralis.Query(Token);\r\n\r\n  const response = await query.find();\r\n\r\n  return response;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { create, saveToken } from '../blockchain/functions';\r\nimport {\r\n  Box,\r\n  Text,\r\n  Input,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Button,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\n\r\nfunction NewTokenForm() {\r\n  const [tokenDetails, setTokenDetails] = useState({\r\n    name: '',\r\n    symbol: '',\r\n    maxSupply: '',\r\n    decimals: '',\r\n    isReiussable: '',\r\n    tokenReceiver: '',\r\n    isBurnable: '',\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleCreate = async () => {\r\n    setIsLoading(true);\r\n    let result = await create(tokenDetails);\r\n    if (result?.events?.tokenDeploy.returnValues.newTokenAddress) {\r\n      window.alert(\r\n        `New token created on the address ${result.events.tokenDeploy.returnValues.newTokenAddress}`\r\n      );\r\n      saveToken(tokenDetails, result);\r\n    }\r\n    console.log(result);\r\n    setIsLoading(false);\r\n  };\r\n  return (\r\n    <Box textAlign=\"left\" fontSize=\"md\">\r\n      <Text fontSize=\"small\">Token Name:</Text>\r\n      <Input\r\n        value={tokenDetails.name}\r\n        onChange={e =>\r\n          setTokenDetails({ ...tokenDetails, name: e.target.value })\r\n        }\r\n        placeholder=\"Token Name\"\r\n      />\r\n      <Text fontSize=\"small\">Token Symbol:</Text>\r\n      <Input\r\n        value={tokenDetails.symbol}\r\n        onChange={e =>\r\n          setTokenDetails({ ...tokenDetails, symbol: e.target.value })\r\n        }\r\n        placeholder=\"Token Symbol\"\r\n      />\r\n      <Text fontSize=\"small\">Max Supply (0 = unlimited supply):</Text>\r\n      <NumberInput>\r\n        <NumberInputField\r\n          value={tokenDetails.maxSupply}\r\n          onChange={e =>\r\n            setTokenDetails({\r\n              ...tokenDetails,\r\n              maxSupply: e.target.value,\r\n            })\r\n          }\r\n          placeholder=\"Max Supply\"\r\n        />\r\n      </NumberInput>\r\n      <Text fontSize=\"small\">Decimals:</Text>\r\n      <NumberInput>\r\n        <NumberInputField\r\n          value={tokenDetails.decimals}\r\n          onChange={e =>\r\n            setTokenDetails({\r\n              ...tokenDetails,\r\n              decimals: e.target.value,\r\n            })\r\n          }\r\n          placeholder=\"Decimals\"\r\n        />\r\n      </NumberInput>\r\n      <Text fontSize=\"small\">\r\n        Reiussable (true = token can be minted / false = no mint function):\r\n      </Text>\r\n      <Input\r\n        value={tokenDetails.isReiussable}\r\n        onChange={e =>\r\n          setTokenDetails({\r\n            ...tokenDetails,\r\n            isReiussable: e.target.value,\r\n          })\r\n        }\r\n        placeholder=\"Reiussable\"\r\n      />\r\n      <Text fontSize=\"small\">\r\n        Token receiver address (if token NOT reiussable, all token supply will\r\n        be send to this address):\r\n      </Text>\r\n      <Input\r\n        value={tokenDetails.tokenReceiver}\r\n        onChange={e =>\r\n          setTokenDetails({\r\n            ...tokenDetails,\r\n            tokenReceiver: e.target.value,\r\n          })\r\n        }\r\n        placeholder=\"Token Receiver Address\"\r\n      />\r\n      <Text fontSize=\"small\">\r\n        Burnable (true = token can be burnend / false = no burn function):\r\n      </Text>\r\n      <Input\r\n        value={tokenDetails.isBurnable}\r\n        onChange={e =>\r\n          setTokenDetails({\r\n            ...tokenDetails,\r\n            isBurnable: e.target.value,\r\n          })\r\n        }\r\n        placeholder=\"Reiussable\"\r\n      />\r\n      {isLoading ? (\r\n        <Button marginTop=\"3\" onClick={handleCreate}>\r\n          <Spinner />\r\n        </Button>\r\n      ) : (\r\n        <Button marginTop=\"3\" onClick={handleCreate}>\r\n          Create\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewTokenForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getTokens } from '../blockchain/functions';\r\nimport { Table, Thead, Tr, Th, Tbody, Td } from '@chakra-ui/react';\r\n\r\nfunction TokenList() {\r\n  const [tokens, setTokens] = useState([]);\r\n\r\n  const getTokensInfo = async () => {\r\n    let data = await getTokens();\r\n    let result = [];\r\n    data.map(token => {\r\n      return result.push(token.attributes);\r\n    });\r\n    setTokens(result);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTokensInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <Table variant=\"simple\">\r\n      <Thead>\r\n        <Tr>\r\n          <Th>Name</Th>\r\n          <Th>Symbol</Th>\r\n          <Th>Max Supply</Th>\r\n          <Th>Decimals</Th>\r\n          <Th>Reiussable</Th>\r\n          <Th>Address</Th>\r\n          <Th>Burnable</Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>\r\n        {tokens.map(token => {\r\n          const {\r\n            address,\r\n            decimals,\r\n            isReiussable,\r\n            maxSupply,\r\n            name,\r\n            symbol,\r\n            isBurnable,\r\n          } = token;\r\n          return (\r\n            <Tr key={address}>\r\n              <Td>{name} </Td>\r\n              <Td>{symbol} </Td>\r\n              <Td>{maxSupply} </Td>\r\n              <Td>{decimals} </Td>\r\n              <Td>{isReiussable} </Td>\r\n              <Td>{address} </Td>\r\n              <Td>{isBurnable} </Td>\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default TokenList;\r\n","import React, { useState } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Button,\n  VStack,\n  HStack,\n  Grid,\n  theme,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { login } from './blockchain/functions';\nimport NewTokenForm from './components/newTokenForm';\nimport TokenList from './components/tokenList';\n\nfunction App() {\n  const [user, setUser] = useState('');\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <HStack justifyContent=\"space-between\">\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          {/* <Button onClick={handleLogin}>Connect with Metamask</Button> */}\n        </HStack>\n        <Grid minH=\"100vh\" p={3}>\n          <VStack spacing={8}>\n            <Text>Tokenizer</Text>\n\n            <Tabs width=\"100%\">\n              <TabList justifyContent=\"center\">\n                <Tab>Issue an Asset</Tab>\n                <Tab>Tokens Created</Tab>\n              </TabList>\n\n              <TabPanels>\n                <TabPanel>\n                  <NewTokenForm />\n                </TabPanel>\n                <TabPanel>\n                  <TokenList />\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}